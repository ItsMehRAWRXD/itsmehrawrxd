apiVersion: v1
kind: Namespace
metadata:
  name: rawrz-security
  labels:
    name: rawrz-security
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rawrz-config
  namespace: rawrz-security
data:
  NODE_ENV: "production"
  PORT: "8080"
  LOG_LEVEL: "info"
  MAX_FILE_SIZE: "10485760"
  REQUEST_TIMEOUT: "30000"
---
apiVersion: v1
kind: Secret
metadata:
  name: rawrz-secrets
  namespace: rawrz-security
type: Opaque
data:
  AUTH_TOKEN: <base64-encoded-auth-token>
  POSTGRES_PASSWORD: <base64-encoded-postgres-password>
  REDIS_PASSWORD: <base64-encoded-redis-password>
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rawrz-data-pvc
  namespace: rawrz-security
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rawrz-uploads-pvc
  namespace: rawrz-security
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rawrz-platform
  namespace: rawrz-security
  labels:
    app: rawrz-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: rawrz-platform
  template:
    metadata:
      labels:
        app: rawrz-platform
    spec:
      containers:
      - name: rawrz-platform
        image: rawrz-security-platform:latest
        ports:
        - containerPort: 8080
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: rawrz-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: rawrz-config
              key: PORT
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: rawrz-secrets
              key: AUTH_TOKEN
        - name: POSTGRES_HOST
          value: "postgres-service"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rawrz-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rawrz-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: uploads-volume
          mountPath: /app/uploads
        livenessProbe:
          httpGet:
            path: /api/status
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/status
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: rawrz-data-pvc
      - name: uploads-volume
        persistentVolumeClaim:
          claimName: rawrz-uploads-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: rawrz-platform-service
  namespace: rawrz-security
spec:
  selector:
    app: rawrz-platform
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: rawrz-security
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "rawrz"
        - name: POSTGRES_USER
          value: "rawrz"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rawrz-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: rawrz-security
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: rawrz-security
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: rawrz-security
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: rawrz-security
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rawrz-ingress
  namespace: rawrz-security
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - rawrz.example.com
    secretName: rawrz-tls
  rules:
  - host: rawrz.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rawrz-platform-service
            port:
              number: 80
---
apiVersion: v1
kind: Secret
metadata:
  name: rawrz-tls
  namespace: rawrz-security
type: kubernetes.io/tls
data:
  tls.crt: <base64-encoded-certificate>
  tls.key: <base64-encoded-private-key>
