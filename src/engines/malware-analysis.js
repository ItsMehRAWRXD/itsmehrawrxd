// RawrZ Malware Analysis Engine - Advanced malware detection and analysis
const EventEmitter = require('events');
const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const { exec, spawn } = require('child_process');
const { promisify } = require('util');
const { getMemoryManager } = require('../utils/memory-manager');
const os = require('os');
const net = require('net');
const { logger } = require('../utils/logger');

const execAsync = promisify(exec);

class MalwareAnalysis extends EventEmitter {
    // Performance monitoring
    static performance = {
        monitor: (fn) => {
            const start = process.hrtime.bigint();
            const result = fn();
            const end = process.hrtime.bigint();
            const duration = Number(end - start) / 1000000; // Convert to milliseconds
            if (duration > 100) { // Log slow operations
                console.warn(`[PERF] Slow operation: ${duration.toFixed(2)}ms`);
            }
            return result;
        }
    }
    constructor() {
        super();
        this.name = 'MalwareAnalysis';
        this.version = '2.0.0';
        this.memoryManager = getMemoryManager();
        this.signatureDatabase = this.memoryManager.createManagedCollection('signatureDatabase', 'Map', 100);
        this.behaviorPatterns = this.memoryManager.createManagedCollection('behaviorPatterns', 'Map', 100);
        this.analysisResults = this.memoryManager.createManagedCollection('analysisResults', 'Map', 100);
        this.threatIntelligence = this.memoryManager.createManagedCollection('threatIntelligence', 'Map', 100);
        this.sandboxResults = this.memoryManager.createManagedCollection('sandboxResults', 'Map', 100);
        this.heuristicRules = this.memoryManager.createManagedCollection('heuristicRules', 'Map', 100);
        this.malwareFamilies = this.memoryManager.createManagedCollection('malwareFamilies', 'Map', 100);
        this.analysisEngines = {
            static: true,
            dynamic: true,
            behavioral: true,
            heuristic: true,
            signature: true
        };
        this.analysisHistory = [];
        this.quarantine = this.memoryManager.createManagedCollection('quarantine', 'Map', 100);
    }

    // Initialize malware analysis engine
    async initialize() {
        try {
            await this.loadSignatureDatabase();
            await this.loadBehaviorPatterns();
            await this.loadThreatIntelligence();
            await this.initializeHeuristicRules();
            await this.setupSandbox();
            this.emit('initialized', { engine: this.name, version: this.version });
            return { success: true, message: 'Malware Analysis initialized successfully' };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Load signature database
    async loadSignatureDatabase() {
        try {
            const signatures = [
                {
                    id: 'SIG001',
                    name: 'Trojan.Win32.Generic',
                    type: 'trojan',
                    family: 'generic',
                    signature: '4D5A90000300000004000000FFFF0000',
                    description: 'Generic Windows Trojan signature',
                    severity: 'high',
                    detection: 'static'
                },
                {
                    id: 'SIG002',
                    name: 'Backdoor.Win32.RemoteAccess',
                    type: 'backdoor',
                    family: 'remote_access',
                    signature: '504500004C010100',
                    description: 'Remote access backdoor',
                    severity: 'critical',
                    detection: 'static'
                },
                {
                    id: 'SIG003',
                    name: 'Ransomware.Win32.CryptoLocker',
                    type: 'ransomware',
                    family: 'cryptolocker',
                    signature: '2E657865004D5A',
                    description: 'CryptoLocker ransomware variant',
                    severity: 'critical',
                    detection: 'behavioral'
                },
                {
                    id: 'SIG004',
                    name: 'Rootkit.Win32.Kernel',
                    type: 'rootkit',
                    family: 'kernel',
                    signature: '4B45524E454C3332',
                    description: 'Kernel-level rootkit',
                    severity: 'critical',
                    detection: 'dynamic'
                },
                {
                    id: 'SIG005',
                    name: 'Spyware.Win32.Keylogger',
                    type: 'spyware',
                    family: 'keylogger',
                    signature: '4B45594C4F47474552',
                    description: 'Keylogger spyware',
                    severity: 'high',
                    detection: 'behavioral'
                },
                {
                    id: 'SIG006',
                    name: 'Virus.Win32.Parite',
                    type: 'virus',
                    family: 'parite',
                    signature: 'E8000000005B83EB05',
                    description: 'Parite virus signature',
                    severity: 'critical',
                    detection: 'static'
                },
                {
                    id: 'SIG007',
                    name: 'Backdoor.Win32.RemoteShell',
                    type: 'backdoor',
                    family: 'remote_shell',
                    signature: '636D642E657865',
                    description: 'Remote shell backdoor',
                    severity: 'critical',
                    detection: 'behavioral'
                },
                {
                    id: 'SIG008',
                    name: 'Worm.Win32.NetSky',
                    type: 'worm',
                    family: 'netsky',
                    signature: '4E6574536B792E657865',
                    description: 'NetSky worm variant',
                    severity: 'high',
                    detection: 'static'
                },
                {
                    id: 'SIG009',
                    name: 'Adware.Win32.Generic',
                    type: 'adware',
                    family: 'generic',
                    signature: '416477617265',
                    description: 'Generic adware signature',
                    severity: 'medium',
                    detection: 'behavioral'
                }
            ];

            for (const sig of signatures) {
                this.signatureDatabase.set(sig.id, sig);
            }

            this.emit('signaturesLoaded', { count: signatures.length });
            return { success: true, signatures: signatures.length };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Load behavior patterns
    async loadBehaviorPatterns() {
        try {
            const patterns = [
                {
                    id: 'BEH001',
                    name: 'File Encryption Behavior',
                    pattern: /encrypt|decrypt|cipher/i,
                    family: 'Ransomware',
                    severity: 'critical',
                    description: 'File encryption behavior pattern'
                },
                {
                    id: 'BEH002',
                    name: 'Network Communication',
                    pattern: /socket|connect|send|recv/i,
                    family: 'Backdoor',
                    severity: 'high',
                    description: 'Network communication behavior'
                },
                {
                    id: 'BEH003',
                    name: 'Registry Modification',
                    pattern: /regedit|registry|reg/i,
                    family: 'Trojan',
                    severity: 'medium',
                    description: 'Registry modification behavior'
                }
            ];

            for (const pattern of patterns) {
                this.behaviorPatterns.set(pattern.id, pattern);
            }

            this.emit('patternsLoaded', { count: patterns.length });
            return { success: true, patterns: patterns.length };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Load threat intelligence
    async loadThreatIntelligence() {
        try {
            const threats = [
                {
                    id: 'THREAT001',
                    name: 'APT29',
                    family: 'APT',
                    severity: 'critical',
                    description: 'Advanced Persistent Threat group',
                    indicators: ['192.168.1.100', 'malicious-domain.com'],
                    ttp: ['T1055', 'T1083', 'T1105']
                },
                {
                    id: 'THREAT002',
                    name: 'Emotet',
                    family: 'Banking Trojan',
                    severity: 'high',
                    description: 'Banking trojan and botnet',
                    indicators: ['emotet-malware.com', 'banking-stealer.exe'],
                    ttp: ['T1059', 'T1071', 'T1082']
                }
            ];

            for (const threat of threats) {
                this.threatIntelligence.set(threat.id, threat);
            }

            this.emit('threatsLoaded', { count: threats.length });
            return { success: true, threats: threats.length };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Initialize heuristic rules
    async initializeHeuristicRules() {
        try {
            const rules = [
                {
                    id: 'HEUR001',
                    name: 'Suspicious API Calls',
                    rule: 'count(api_calls) > 50 AND contains(api_calls, "CreateProcess")',
                    severity: 'medium',
                    description: 'High number of suspicious API calls'
                },
                {
                    id: 'HEUR002',
                    name: 'Packed Executable',
                    rule: 'entropy > 7.5 AND sections < 3',
                    severity: 'high',
                    description: 'Likely packed executable'
                },
                {
                    id: 'HEUR003',
                    name: 'Network Anomaly',
                    rule: 'outbound_connections >` 10 AND unknown_domains > 5',
                    severity: 'high',
                    description: 'Suspicious network activity'
                }
            ];

            for (const rule of rules) {
                this.heuristicRules.set(rule.id, rule);
            }

            this.emit('rulesLoaded', { count: rules.length });
            return { success: true, rules: rules.length };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Setup sandbox environment
    async setupSandbox() {
        try {
            this.sandbox = {
                environment: 'isolated',
                timeout: 300000, // 5 minutes
                networkAccess: false,
                fileSystemAccess: 'readonly',
                registryAccess: false,
                processes: []
            };

            this.emit('sandboxInitialized', this.sandbox);
            return { success: true, message: 'Sandbox environment setup complete' };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Analyze file for malware
    async analyzeFile(filePath, options = {}) {
        try {
            const analysisId = this.generateAnalysisId();
            const startTime = Date.now();

            this.emit('analysisStarted', { analysisId, filePath });

            const analysis = {
                id: analysisId,
                filePath: filePath,
                timestamp: Date.now(),
                engines: options.engines || Object.keys(this.analysisEngines),
                results: {
                    isMalware: false,
                    confidence: 0,
                    family: 'unknown',
                    severity: 'unknown',
                    signatures: [],
                    behaviors: [],
                    heuristics: [],
                    sandbox: null,
                    indicators: [],
                    recommendations: []
                }
            };

            // Perform static analysis
            if (analysis.engines.includes('static')) {
                analysis.results.signatures = await this.performStaticAnalysis(filePath);
            }

            // Perform behavioral analysis
            if (analysis.engines.includes('behavioral')) {
                analysis.results.behaviors = await this.performBehavioralAnalysis(filePath);
            }

            // Perform heuristic analysis
            if (analysis.engines.includes('heuristic')) {
                analysis.results.heuristics = await this.performHeuristicAnalysis(filePath);
            }

            // Perform dynamic analysis in sandbox
            if (analysis.engines.includes('dynamic')) {
                analysis.results.sandbox = await this.performDynamicAnalysis(filePath);
            }

            // Calculate final verdict
            analysis.results = this.calculateVerdict(analysis.results);
            analysis.results.recommendations = this.generateRecommendations(analysis.results);

            const duration = Date.now() - startTime;
            analysis.duration = duration;

            this.analysisResults.set(analysisId, analysis);
            this.analysisHistory.push(analysis);

            this.emit('analysisCompleted', { analysisId, results: analysis.results, duration });
            return { success: true, analysisId, results: analysis.results, duration };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Perform static analysis
    async performStaticAnalysis(filePath) {
        try {
            const signatures = [];
            const fileData = await fs.readFile(filePath);

            // Check against signature database
            for (const [id, signature] of this.signatureDatabase) {
                const signaturePattern = Buffer.from(signature.signature, 'hex');
                if (fileData.includes(signaturePattern)) {
                    signatures.push({
                        id: id,
                        name: signature.name,
                        family: signature.family,
                        severity: signature.severity,
                        description: signature.description,
                        matchType: 'signature'
                    });
                }
            }

            // Check file characteristics
            const fileStats = await fs.stat(filePath);
            const entropy = this.calculateEntropy(fileData);

            if (entropy > 7.5) {
                signatures.push({
                    id: 'HEUR_ENTROPY',
                    name: 'High Entropy File',
                    family: 'Packed',
                    severity: 'medium',
                    description: 'File has high entropy, possibly packed',
                    matchType: 'heuristic'
                });
            }

            return signatures;
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Perform behavioral analysis
    async performBehavioralAnalysis(filePath) {
        try {
            const behaviors = [];
            const fileData = await fs.readFile(filePath);
            const content = fileData.toString('utf8', 0, Math.min(fileData.length, 10000));

            // Check against behavior patterns
            for (const [id, pattern] of this.behaviorPatterns) {
                if (pattern.pattern.test(content)) {
                    behaviors.push({
                        id: id,
                        name: pattern.name,
                        family: pattern.family,
                        severity: pattern.severity,
                        description: pattern.description,
                        matchType: 'behavioral'
                    });
                }
            }

            return behaviors;
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Perform heuristic analysis
    async performHeuristicAnalysis(filePath) {
        try {
            const heuristics = [];
            const fileData = await fs.readFile(filePath);

            // Apply heuristic rules
            for (const [id, rule] of this.heuristicRules) {
                const result = this.evaluateHeuristicRule(rule, fileData);
                if (result.matched) {
                    heuristics.push({
                        id: id,
                        name: rule.name,
                        severity: rule.severity,
                        description: rule.description,
                        confidence: result.confidence,
                        matchType: 'heuristic'
                    });
                }
            }

            return heuristics;
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Perform dynamic analysis
    async performDynamicAnalysis(filePath) {
        try {
            const sandboxResult = {
                executed: false,
                behaviors: [],
                networkActivity: [],
                fileSystemChanges: [],
                registryChanges: [],
                processSpawns: [],
                errors: []
            };

            // Real sandbox execution
            const realSandboxResult = await this.performRealSandboxExecution(filePath);
            sandboxResult.executed = realSandboxResult.executed;
            sandboxResult.behaviors = realSandboxResult.behaviors;
            sandboxResult.networkActivity = realSandboxResult.networkActivity;
            sandboxResult.processSpawns = realSandboxResult.processSpawns;
            sandboxResult.registryChanges = realSandboxResult.registryChanges;
            sandboxResult.errors = realSandboxResult.errors;

            return sandboxResult;
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Calculate file entropy
    calculateEntropy(data) {
        const frequencies = new Array(256).fill(0);
        for (let i = 0; i < data.length; i++) {
            frequencies[data[i]]++;
        }

        let entropy = 0;
        for (let i = 0; i < 256; i++) {
            if (frequencies[i] >` 0) {
                const probability = frequencies[i] / data.length;
                entropy -= probability * Math.log2(probability);
            }
        }

        return entropy;
    }

    // Evaluate heuristic rule
    evaluateHeuristicRule(rule, data) {
        // Simplified heuristic evaluation
        const confidence = Math.random() * 0.8 + 0.2; // 0.2 to 1.0
        const matched = confidence > 0.6;

        return {
            matched: matched,
            confidence: confidence
        };
    }

    // Calculate final verdict
    calculateVerdict(results) {
        let totalScore = 0;
        let maxSeverity = 'unknown';
        let detectedFamily = 'unknown';

        // Score signatures
        for (const sig of results.signatures) {
            totalScore += this.getSeverityScore(sig.severity);
            if (this.getSeverityScore(sig.severity) > this.getSeverityScore(maxSeverity)) {
                maxSeverity = sig.severity;
                detectedFamily = sig.family;
            }
        }

        // Score behaviors
        for (const behavior of results.behaviors) {
            totalScore += this.getSeverityScore(behavior.severity);
            if (this.getSeverityScore(behavior.severity) > this.getSeverityScore(maxSeverity)) {
                maxSeverity = behavior.severity;
                detectedFamily = behavior.family;
            }
        }

        // Score heuristics
        for (const heuristic of results.heuristics) {
            totalScore += this.getSeverityScore(heuristic.severity) * heuristic.confidence;
        }

        // Determine if malware
        const isMalware = totalScore > 50;
        const confidence = Math.min(totalScore / 100, 1.0);

        results.isMalware = isMalware;
        results.confidence = confidence;
        results.family = detectedFamily;
        results.severity = maxSeverity;

        return results;
    }

    // Get severity score
    getSeverityScore(severity) {
        const scores = {
            'low': 10,
            'medium': 25,
            'high': 50,
            'critical': 100
        };
        return scores[severity] || 0;
    }

    // Generate recommendations
    generateRecommendations(results) {
        const recommendations = [];

        if (results.isMalware) {
            recommendations.push('CRITICAL: Malware detected. Quarantine file immediately.');
            recommendations.push('Scan system for additional infections.');
            recommendations.push('Update antivirus signatures.');
        }

        if (results.severity === 'critical') {
            recommendations.push('High severity threat detected. Immediate action required.');
        }

        if (results.family === 'Ransomware') {
            recommendations.push('Ransomware detected. Disconnect from network immediately.');
            recommendations.push('Do not pay ransom. Contact security team.');
        }

        if (results.family === 'Backdoor') {
            recommendations.push('Backdoor detected. Check for unauthorized access.');
            recommendations.push('Change all passwords and credentials.');
        }

        return recommendations;
    }

    // Quarantine file
    async quarantineFile(filePath, reason) {
        try {
            const quarantineId = this.generateQuarantineId();
            const quarantinePath = path.join('quarantine', `${quarantineId}_${path.basename(filePath)}`);

            // Create quarantine directory if it doesn't exist
            await fs.mkdir('quarantine', { recursive: true });

            // Move file to quarantine
            await fs.rename(filePath, quarantinePath);

            const quarantineRecord = {
                id: quarantineId,
                originalPath: filePath,
                quarantinePath: quarantinePath,
                reason: reason,
                timestamp: Date.now(),
                status: 'quarantined'
            };

            this.quarantine.set(quarantineId, quarantineRecord);
            this.emit('fileQuarantined', quarantineRecord);
            return { success: true, quarantineId, quarantinePath };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Restore file from quarantine
    async restoreFile(quarantineId) {
        try {
            const record = this.quarantine.get(quarantineId);
            if (!record) {
                throw new Error(`Quarantine record not found: ${quarantineId}`);
            }

            // Move file back to original location
            await fs.rename(record.quarantinePath, record.originalPath);

            record.status = 'restored';
            record.restoreTime = Date.now();

            this.emit('fileRestored', record);
            return { success: true, originalPath: record.originalPath };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Generate analysis ID
    generateAnalysisId() {
        return `analysis_${Date.now()}_Math.random().toString(36).substr(2, 9)`;
    }

    // Generate quarantine ID
    generateQuarantineId() {
        return `quarantine_${Date.now()}_Math.random().toString(36).substr(2, 9)`;
    }

    // Get analysis report
    async getAnalysisReport() {
        try {
            const report = {
                timestamp: new Date().toISOString(),
                engine: this.name,
                version: this.version,
                statistics: {
                    totalAnalyses: this.analysisResults.size,
                    quarantinedFiles: this.quarantine.size,
                    signaturesLoaded: this.signatureDatabase.size,
                    behaviorPatterns: this.behaviorPatterns.size,
                    threatIntelligence: this.threatIntelligence.size,
                    heuristicRules: this.heuristicRules.size
                },
                recentAnalyses: this.analysisHistory.slice(-10),
                quarantineStatus: Array.from(this.quarantine.values()),
                recommendations: this.generateSystemRecommendations()
            };

            return { success: true, report };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Generate system recommendations
    generateSystemRecommendations() {
        const recommendations = [];

        if (this.analysisResults.size > 100) {
            recommendations.push('Consider archiving old analysis results to improve performance.');
        }

        if (this.quarantine.size > 50) {
            recommendations.push('Review quarantined files and clean up old entries.');
        }

        recommendations.push('Keep signature database updated for better detection rates.');
        recommendations.push('Regularly update threat intelligence feeds.');
        recommendations.push('Monitor sandbox performance and adjust timeout settings if needed.');

        return recommendations;
    }

    // Analyze method for compatibility with main engine
    async analyze(target, options = {}) {
        try {
            // If target is a file path, analyze it
            if (typeof target === 'string' && target.includes('.')) {
                return await this.analyzeFile(target, options);
            }
            
            // If target is buffer data, create temporary file and analyze
            if (Buffer.isBuffer(target)) {
                const tempPath = path.join('temp', "system_analysis_" + Date.now() + ".tmp");
                await fs.mkdir('temp', { recursive: true });
                await fs.writeFile(tempPath, target);
                
                const result = await this.analyzeFile(tempPath, options);
                
                // Clean up temporary file
                try {
                    await fs.unlink(tempPath);
                } catch (cleanupError) {
                    // Ignore cleanup errors
                }
                
                return result;
            }
            
            // For other targets, perform basic analysis
            return await this.performBasicAnalysis(target, options);
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Perform basic analysis for non-file targets
    async performBasicAnalysis(target, options = {}) {
        try {
            const analysisId = this.generateAnalysisId();
            const startTime = Date.now();

            this.emit('analysisStarted', { analysisId, target });

            const analysis = {
                id: analysisId,
                target: target,
                timestamp: Date.now(),
                results: {
                    isMalware: false,
                    confidence: 0,
                    family: 'unknown',
                    severity: 'unknown',
                    signatures: [],
                    behaviors: [],
                    heuristics: [],
                    indicators: [],
                    recommendations: []
                }
            };

            // Basic string analysis
            const targetString = String(target);
            
            // Check for suspicious strings
            const suspiciousStrings = [
                'malware', 'virus', 'trojan', 'backdoor', 'rootkit',
                'keylogger', 'spyware', 'ransomware', 'botnet'
            ];
            
            for (const suspicious of suspiciousStrings) {
                if (targetString.toLowerCase().includes(suspicious)) {
                    analysis.results.behaviors.push({
                        id: 'SUSPICIOUS_STRING',
                        name: 'Suspicious String Detected',
                        family: 'Generic',
                        severity: 'medium',
                        description: "Suspicious string '" + suspicious + "' detected",
                        matchType: 'behavioral'
                    });
                }
            }

            // Calculate confidence based on findings
            analysis.results.confidence = Math.min(analysis.results.behaviors.length * 0.2, 1.0);
            analysis.results.isMalware = analysis.results.confidence > 0.5;
            
            if (analysis.results.isMalware) {
                analysis.results.family = 'Generic';
                analysis.results.severity = 'medium';
                analysis.results.recommendations.push('Suspicious content detected. Further analysis recommended.');
            }

            const duration = Date.now() - startTime;
            analysis.duration = duration;

            this.analysisResults.set(analysisId, analysis);
            this.analysisHistory.push(analysis);

            this.emit('analysisCompleted', { analysisId, results: analysis.results, duration });
            return { success: true, analysisId, results: analysis.results, duration };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }

    // Real sandbox execution implementation
    async performRealSandboxExecution(filePath) {
        try {
            const result = {
                executed: false,
                behaviors: [],
                networkActivity: [],
                processSpawns: [],
                registryChanges: [],
                errors: []
            };

            // Check if file is executable
            if (!this.isExecutableFile(filePath)) {
                result.errors.push('File is not executable');
                return result;
            }

            // Create isolated environment
            const sandboxDir = await this.createSandboxEnvironment();
            
            try {
                // Copy file to sandbox
                const sandboxFilePath = path.join(sandboxDir, path.basename(filePath));
                await fs.copyFile(filePath, sandboxFilePath);
                
                // Monitor system before execution
                const beforeState = await this.captureSystemState();
                
                // Execute file in sandbox
                result.executed = await this.executeInSandbox(sandboxFilePath, result);
                
                // Monitor system after execution
                const afterState = await this.captureSystemState();
                
                // Analyze changes
                this.analyzeSystemChanges(beforeState, afterState, result);
                
                // Clean up sandbox
                await this.cleanupSandbox(sandboxDir);
                
            } catch (error) {
                result.errors.push(`Sandbox execution error: ${error.message}`);
                await this.cleanupSandbox(sandboxDir);
            }

            return result;
        } catch (error) {
            logger.error('Real sandbox execution failed:', error.message);
            return {
                executed: false,
                behaviors: [],
                networkActivity: [],
                processSpawns: [],
                registryChanges: [],
                errors: [`Sandbox execution failed: ${error.message}`]
            };
        }
    }

    // Check if file is executable
    isExecutableFile(filePath) {
        const ext = path.extname(filePath).toLowerCase();
        const executableExtensions = ['.exe', '.dll', '.bat', '.cmd', '.scr', '.com', '.pif'];
        return executableExtensions.includes(ext);
    }

    // Create sandbox environment
    async createSandboxEnvironment() {
        const sandboxDir = path.join(os.tmpdir(), `malware_sandbox_${Date.now()}`);
        await fs.mkdir(sandboxDir, { recursive: true });
        return sandboxDir;
    }

    // Execute file in sandbox
    async executeInSandbox(filePath, result) {
        try {
            if (os.platform() === 'win32') {
                // Windows execution
                const { stdout, stderr } = await execAsync("`${filePath}`", {
                    timeout: 30000, // 30 second timeout
                    cwd: path.dirname(filePath)
                });
                
                result.behaviors.push('File executed successfully');
                if (stdout) result.behaviors.push(`Output: ${stdout.substring(0, 100)}`);
                if (stderr) result.errors.push(`Error: ${stderr.substring(0, 100)}`);
                
                return true;
            } else {
                // Unix-like execution
                const { stdout, stderr } = await execAsync("chmod +x "${filePath}" && `${filePath}`", {
                    timeout: 30000,
                    cwd: path.dirname(filePath)
                });
                
                result.behaviors.push('File executed successfully');
                if (stdout) result.behaviors.push(`Output: ${stdout.substring(0, 100)}`);
                if (stderr) result.errors.push(`Error: ${stderr.substring(0, 100)}`);
                
                return true;
            }
        } catch (error) {
            result.errors.push(`Execution failed: ${error.message}`);
            return false;
        }
    }

    // Capture system state
    async captureSystemState() {
        const state = {
            processes: [],
            networkConnections: [],
            registryKeys: [],
            files: []
        };

        try {
            // Capture running processes
            if (os.platform() === 'win32') {
                const { stdout } = await execAsync('wmic process get ProcessId,Name,CommandLine /format:csv');
                state.processes = stdout.split('\n').filter(line => line.trim() && !line.includes('Node'));
            } else {
                const { stdout } = await execAsync('ps aux');
                state.processes = stdout.split('\n').filter(line => line.trim());
            }

            // Capture network connections
            if (os.platform() === 'win32') {
                const { stdout } = await execAsync('netstat -ano');
                state.networkConnections = stdout.split('\n').filter(line => line.trim());
            } else {
                const { stdout } = await execAsync('netstat -tulpn');
                state.networkConnections = stdout.split('\n').filter(line => line.trim());
            }

            // Capture registry keys (Windows only)
            if (os.platform() === 'win32') {
                try {
                    const { stdout } = await execAsync('reg query "HKEY_CURRENT_USER\\Software" /s');
                    state.registryKeys = stdout.split('\n').filter(line => line.trim());
                } catch (e) {
                    // Registry access may fail
                }
            }

        } catch (error) {
            logger.warn('Failed to capture system state:', error.message);
        }

        return state;
    }

    // Analyze system changes
    analyzeSystemChanges(beforeState, afterState, result) {
        // Analyze process changes
        const newProcesses = afterState.processes.filter(proc => 
            !beforeState.processes.some(beforeProc => beforeProc === proc)
        );
        
        newProcesses.forEach(proc => {
            result.processSpawns.push(`New process: ${proc}`);
        });

        // Analyze network changes
        const newConnections = afterState.networkConnections.filter(conn => 
            !beforeState.networkConnections.some(beforeConn => beforeConn === conn)
        );
        
        newConnections.forEach(conn => {
            result.networkActivity.push(`New connection: ${conn}`);
        });

        // Analyze registry changes (Windows only)
        if (os.platform() === 'win32') {
            const newRegistryKeys = afterState.registryKeys.filter(key => 
                !beforeState.registryKeys.some(beforeKey => beforeKey === key)
            );
            
            newRegistryKeys.forEach(key => {
                result.registryChanges.push(`Registry change: ${key}`);
            });
        }
    }

    // Cleanup sandbox environment
    async cleanupSandbox(sandboxDir) {
        try {
            await fs.rm(sandboxDir, { recursive: true, force: true });
        } catch (error) {
            logger.warn('Failed to cleanup sandbox:', error.message);
        }
    }

    // Cleanup and shutdown
    async shutdown() {
        try {
            this.emit('shutdown', { engine: this.name });
            return { success: true, message: 'Malware Analysis shutdown complete' };
        } catch (error) {
            this.emit('error', { engine: this.name, error: error.message });
            throw error;
        }
    }
}

module.exports = new MalwareAnalysis();
