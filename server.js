const express=require('express');const cors=require('cors');const helmet=require('helmet');const path=require('path');require('dotenv').config();
const RawrZStandalone=require('./rawrz-standalone');const rawrzEngine=require('./src/engines/rawrz-engine');
const app=express();const port=parseInt(process.env.PORT||'8080',10);const authToken=process.env.AUTH_TOKEN||'';const rawrz=new RawrZStandalone();
function requireAuth(req,res,next){if(!authToken)return next();const h=(req.headers['authorization']||'');const q=req.query.token;if(h.startsWith('Bearer ')){const p=h.slice(7).trim();if(p===authToken)return next()}if(q&&q===authToken)return next();return res.status(401).json({error:'Unauthorized'})}
app.use(helmet());app.use(cors());app.use(express.json({limit:'5mb'}));app.use('/static',express.static(path.join(__dirname,'public')));
(async()=>{try{await rawrzEngine.initializeModules();console.log('[OK] RawrZ core engine initialized')}catch(e){console.error('[WARN] Core engine init failed:',e.message)}})();
app.get('/health',(_req,res)=>res.json({ok:true,status:'healthy'}));
app.get('/panel',(_req,res)=>res.sendFile(path.join(__dirname,'public','panel.html')));
app.get('/',(_req,res)=>res.redirect('/panel'));
app.post('/hash',requireAuth,async(req,res)=>{try{const{input,algorithm='sha256',save=false,extension}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});res.json(await rawrz.hash(input,algorithm,!!save,extension))}catch(e){res.status(500).json({error:e.message})}});
app.post('/encrypt',requireAuth,async(req,res)=>{try{const{algorithm,input,extension}=req.body||{};if(!algorithm||!input)return res.status(400).json({error:'algorithm and input required'});res.json(await rawrz.encrypt(algorithm,input,extension))}catch(e){res.status(500).json({error:e.message})}});
app.post('/decrypt',requireAuth,async(req,res)=>{try{const{algorithm,input,key,iv,extension}=req.body||{};if(!algorithm||!input)return res.status(400).json({error:'algorithm and input required'});res.json(await rawrz.decrypt(algorithm,input,key,iv,extension))}catch(e){res.status(500).json({error:e.message})}});
app.get('/dns',requireAuth,async(req,res)=>{try{const h=req.query.hostname;if(!h)return res.status(400).json({error:'hostname required'});res.json(await rawrz.dnsLookup(String(h)))}catch(e){res.status(500).json({error:e.message})}});
app.get('/ping',requireAuth,async(req,res)=>{try{const h=req.query.host;if(!h)return res.status(400).json({error:'host required'});res.json(await rawrz.ping(String(h),false))}catch(e){res.status(500).json({error:e.message})}});
app.get('/files',requireAuth,async(_req,res)=>{try{res.json(await rawrz.listFiles())}catch(e){res.status(500).json({error:e.message})}});
app.post('/upload',requireAuth,async(req,res)=>{try{const{filename,base64}=req.body||{};if(!filename||!base64)return res.status(400).json({error:'filename and base64 required'});res.json(await rawrz.uploadFile(filename,base64))}catch(e){res.status(500).json({error:e.message})}});
app.get('/download',requireAuth,async(req,res)=>{try{const fn=String(req.query.filename||'');if(!fn)return res.status(400).json({error:'filename required'});res.download(path.join(__dirname,'uploads',fn),fn)}catch(e){res.status(500).json({error:e.message})}});
app.post('/cli',requireAuth,async(req,res)=>{try{const{command,args=[]}=req.body||{};if(!command)return res.status(400).json({error:'command required'});const i=new RawrZStandalone();const out=await i.processCommand([command,...args]);res.json({success:true,result:out})}catch(e){res.status(500).json({error:e.message})}});
app.post('/stub',requireAuth,async(req,res)=>{try{const{target,options={}}=req.body||{};if(!target)return res.status(400).json({error:'target is required'});const rawrz=new RawrZStandalone();const result=await rawrz.generateStub(target,options);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/keygen',requireAuth,async(req,res)=>{try{const{algorithm='aes256',length=256,save=false,extension='.key'}=req.body||{};const rawrz=new RawrZStandalone();const result=await rawrz.generateKey(algorithm,length,save,extension);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/advancedcrypto',requireAuth,async(req,res)=>{try{const{input,operation='encrypt'}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.advancedCrypto(input,operation);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/sign',requireAuth,async(req,res)=>{try{const{input,privatekey}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.signData(input,privatekey);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/verify',requireAuth,async(req,res)=>{try{const{input,signature,publickey}=req.body||{};if(!input||!signature||!publickey)return res.status(400).json({error:'input, signature, and publickey are required'});const rawrz=new RawrZStandalone();const result=await rawrz.verifySignature(input,signature,publickey);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/base64encode',requireAuth,async(req,res)=>{try{const{input}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.base64Encode(input);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/base64decode',requireAuth,async(req,res)=>{try{const{input}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.base64Decode(input);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/hexencode',requireAuth,async(req,res)=>{try{const{input}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.hexEncode(input);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/hexdecode',requireAuth,async(req,res)=>{try{const{input}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.hexDecode(input);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/urlencode',requireAuth,async(req,res)=>{try{const{input}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.urlEncode(input);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/urldecode',requireAuth,async(req,res)=>{try{const{input}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.urlDecode(input);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/random',requireAuth,async(req,res)=>{try{const{length=32}=req.body||{};const rawrz=new RawrZStandalone();const result=await rawrz.generateRandom(length);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.get('/uuid',requireAuth,async(req,res)=>{try{const rawrz=new RawrZStandalone();const result=await rawrz.generateUUID();res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/password',requireAuth,async(req,res)=>{try{const{length=16,includeSpecial=true}=req.body||{};const rawrz=new RawrZStandalone();const result=await rawrz.generatePassword(length,includeSpecial);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/analyze',requireAuth,async(req,res)=>{try{const{input}=req.body||{};if(!input)return res.status(400).json({error:'input is required'});const rawrz=new RawrZStandalone();const result=await rawrz.analyzeFile(input);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.get('/sysinfo',requireAuth,async(req,res)=>{try{const rawrz=new RawrZStandalone();const result=await rawrz.systemInfo();res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.get('/processes',requireAuth,async(req,res)=>{try{const rawrz=new RawrZStandalone();const result=await rawrz.listProcesses();res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/portscan',requireAuth,async(req,res)=>{try{const{host,startPort=1,endPort=1000}=req.body||{};if(!host)return res.status(400).json({error:'host is required'});const rawrz=new RawrZStandalone();const result=await rawrz.portScan(host,startPort,endPort);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/traceroute',requireAuth,async(req,res)=>{try{const{host}=req.body||{};if(!host)return res.status(400).json({error:'host is required'});const rawrz=new RawrZStandalone();const result=await rawrz.traceroute(host);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/whois',requireAuth,async(req,res)=>{try{const{domain}=req.body||{};if(!domain)return res.status(400).json({error:'domain is required'});const rawrz=new RawrZStandalone();const result=await rawrz.whois(domain);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/fileops',requireAuth,async(req,res)=>{try{const{operation,input,output}=req.body||{};if(!operation||!input)return res.status(400).json({error:'operation and input are required'});const rawrz=new RawrZStandalone();const result=await rawrz.fileOperations(operation,input,output);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/textops',requireAuth,async(req,res)=>{try{const{operation,input,options={}}=req.body||{};if(!operation||!input)return res.status(400).json({error:'operation and input are required'});const rawrz=new RawrZStandalone();const result=await rawrz.textOperations(operation,input,options);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/validate',requireAuth,async(req,res)=>{try{const{input,type}=req.body||{};if(!input||!type)return res.status(400).json({error:'input and type are required'});const rawrz=new RawrZStandalone();const result=await rawrz.validate(input,type);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.get('/time',requireAuth,async(req,res)=>{try{const rawrz=new RawrZStandalone();const result=await rawrz.getTime();res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.post('/math',requireAuth,async(req,res)=>{try{const{expression}=req.body||{};if(!expression)return res.status(400).json({error:'expression is required'});const rawrz=new RawrZStandalone();const result=await rawrz.mathOperation(expression);res.json({success:true,result})}catch(e){res.status(500).json({error:e.message})}});
app.listen(port,()=>console.log([OK] RawrZ API listening on ));